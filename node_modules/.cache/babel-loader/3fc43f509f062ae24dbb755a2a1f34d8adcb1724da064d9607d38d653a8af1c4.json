{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { set, get } from 'idb-keyval';\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: {\n        name: '',\n        firstName: '',\n        address: ''\n      }\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n      //Data from table + form\n      var result = this.formData;\n      //To avoid cloning error\n      result = JSON.stringify(result);\n      var test = JSON.parse(result);\n      await set('VG-xxx-1', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-1');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    submitForm() {\n      this.getFormData();\n    },\n    addItem() {\n      this.formData.push({\n        name: \"\",\n        firstName: \"\",\n        address: \"\"\n      });\n    },\n    removeItem(index) {\n      this.formData.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"mappings":";AA+BA,SAASA,GAAG,EAAEC,GAAE,QAAS,YAAY;AAErC,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRF,IAAI,EAAE,EAAE;QACRG,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE;MACX;IACF,CAAC;EACH,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACC,WAAW,EAAE;IAClBC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACC,YAAY,CAAC;EAC5D,CAAC;EACDC,aAAa,GAAG;IACdH,MAAM,CAACI,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACF,YAAY,CAAC;EAC/D,CAAC;EACDG,OAAO,EAAE;IACP,MAAMH,YAAY,GAAG;MACvB;MACA,IAAII,MAAK,GAAI,IAAI,CAACX,QAAQ;MAC1B;MACAW,MAAK,GAAIC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;MAC/B,IAAIG,IAAG,GAAIF,IAAI,CAACG,KAAK,CAACJ,MAAM,CAAC;MAE7B,MAAMf,GAAG,CAAC,UAAU,EAAEkB,IAAI,CAAC;IACzB,CAAC;IACD,MAAMV,WAAW,GAAG;MAClB,MAAMY,SAAQ,GAAI,MAAMnB,GAAG,CAAC,UAAU,CAAC;MACvC,IAAImB,SAAS,EAAE;QACb,IAAI,CAAChB,QAAO,GAAIgB,SAAS;MAC3B;IACF,CAAC;IACDC,UAAU,GAAG;MACX,IAAI,CAACb,WAAW,EAAE;IACpB,CAAC;IACDc,OAAO,GAAG;MACR,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAAC;QAAErB,IAAI,EAAE,EAAE;QAAEG,SAAS,EAAE,EAAE;QAAEC,OAAO,EAAE;MAAG,CAAC,CAAC;IAC9D,CAAC;IACDkB,UAAU,CAACC,KAAK,EAAE;MAChB,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAChC;EACF;AACF,CAAC","names":["set","get","name","data","formData","firstName","address","mounted","getFormData","window","addEventListener","saveFormData","beforeUnmount","removeEventListener","methods","result","JSON","stringify","test","parse","savedData","submitForm","addItem","push","removeItem","index","splice"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n    <div>\n\t    <table>\n\t      <thead>\n\t        <tr>\n\t          <th>Nom</th>\n\t          <th>Pr√©nom</th>\n\t          <th>Adresse</th>\n\t          <th>Actions</th>\n\t        </tr>\n\t      </thead>\n\t      <tbody>\n\t        <tr v-for=\"(item, index) in formData\" :key=\"index\">\n\t          <td><input type=\"text\" v-model=\"item.name\" /></td>\n\t          <td><input type=\"text\" v-model=\"item.firstName\" /></td>\n\t          <td><input type=\"text\" v-model=\"item.address\" /></td>\n\t          <td>\n\t            <button @click=\"removeItem(index)\">Supprimer</button>\n\t          </td>\n\t        </tr>\n\t      </tbody>\n\t    </table>\n\t    <button @click=\"addItem\">Ajouter une ligne</button>\n\t    <button type=\"submit\">Envoyer</button>\n\t  </div>\n    \n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: {\n        name: '',\n        firstName: '',\n        address: ''\n      },\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\t//Data from table + form\n\t\tvar result = this.formData;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-1', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-1');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    submitForm() {\n      this.getFormData();\n    },\n    addItem() {\n      this.formData.push({ name: \"\", firstName: \"\", address: \"\" });\n    },\n    removeItem(index) {\n      this.formData.splice(index, 1);\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}