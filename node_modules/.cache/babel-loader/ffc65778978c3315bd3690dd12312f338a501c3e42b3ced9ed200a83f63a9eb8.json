{"ast":null,"code":"import { set, get } from 'idb-keyval';\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: [{\n        name: '',\n        email: ''\n      }, {\n        name: '',\n        email: ''\n      }]\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n      //Data from table + form\n      var result = this.formData;\n      //To avoid cloning error\n      result = JSON.stringify(result);\n      var test = JSON.parse(result);\n      await set('VG-xxx-1', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-1');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    submitForm() {\n      this.getFormData();\n    }\n  }\n};","map":{"version":3,"mappings":"AAuBA,SAASA,GAAG,EAAEC,GAAE,QAAS,YAAY;AAErC,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,CACR;QAACF,IAAI,EAAE,EAAE;QAAEG,KAAK,EAAE;MAAE,CAAC,EACrB;QAACH,IAAI,EAAE,EAAE;QAAEG,KAAK,EAAE;MAAE;IAExB,CAAC;EACH,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACC,WAAW,EAAE;IAClBC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACC,YAAY,CAAC;EAC5D,CAAC;EACDC,aAAa,GAAG;IACdH,MAAM,CAACI,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACF,YAAY,CAAC;EAC/D,CAAC;EACDG,OAAO,EAAE;IACP,MAAMH,YAAY,GAAG;MACvB;MACA,IAAII,MAAK,GAAI,IAAI,CAACV,QAAQ;MAC1B;MACAU,MAAK,GAAIC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;MAC/B,IAAIG,IAAG,GAAIF,IAAI,CAACG,KAAK,CAACJ,MAAM,CAAC;MAE7B,MAAMd,GAAG,CAAC,UAAU,EAAEiB,IAAI,CAAC;IACzB,CAAC;IACD,MAAMV,WAAW,GAAG;MAClB,MAAMY,SAAQ,GAAI,MAAMlB,GAAG,CAAC,UAAU,CAAC;MACvC,IAAIkB,SAAS,EAAE;QACb,IAAI,CAACf,QAAO,GAAIe,SAAS;MAC3B;IACF,CAAC;IACDC,UAAU,GAAG;MACX,IAAI,CAACb,WAAW,EAAE;IACpB;EACF;AACF,CAAC","names":["set","get","name","data","formData","email","mounted","getFormData","window","addEventListener","saveFormData","beforeUnmount","removeEventListener","methods","result","JSON","stringify","test","parse","savedData","submitForm"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n    <label>\n      Nom:\n      <input type=\"text\" v-model=\"formData.name\" @input=\"saveFormData\" />\n    </label>\n    <label>\n      Adresse email:\n      <input type=\"email\" v-model=\"formData.email\" @input=\"saveFormData\" />\n    </label>\n    <button type=\"submit\">Envoyer</button>\n\n    <tr v-for=\"(item, index) in formData\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: [\n        {name: '', email: ''},\n        {name: '', email: ''}\n      ],\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\t//Data from table + form\n\t\tvar result = this.formData;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-1', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-1');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}