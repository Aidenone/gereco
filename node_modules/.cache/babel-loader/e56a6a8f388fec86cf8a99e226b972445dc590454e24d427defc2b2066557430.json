{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = [\"onUpdate:modelValue\"];\nconst _hoisted_2 = [\"onUpdate:modelValue\"];\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.formData, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.name = $event\n    }, null, 8 /* PROPS */, _hoisted_1), [[_vModelText, item.name]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.email = $event\n    }, null, 8 /* PROPS */, _hoisted_2), [[_vModelText, item.email]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.removeItem(index)\n    }, \"Supprimer\", 8 /* PROPS */, _hoisted_3)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.addItem && $options.addItem(...args))\n  }, \"Ajouter une ligne\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;uBACEA,oBAUO;IAVAC,QAAM,wDAAUC,mDAAU;yBAE/BF,oBAMEG,6BAN0BC,cAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBAAvBN,oBAME;MANqCO,GAAG,EAAED;IAAK,IACnDE,oBAAkD,6BAA9CA,oBAAyC;MAAlCC,IAAI,EAAC,MAAM;uCAAUJ,IAAI,CAACK,IAAI;wDAATL,IAAI,CAACK,IAAI,OACzCF,oBAAmD,6BAA/CA,oBAA0C;MAAnCC,IAAI,EAAC,MAAM;uCAAUJ,IAAI,CAACM,KAAK;wDAAVN,IAAI,CAACM,KAAK,OAC1CH,oBAEK,aADLA,oBAAqD;MAA5CI,OAAK,YAAEV,mBAAU,CAACI,KAAK;OAAG,WAAS;kCAG7CE,oBAAmD;IAA1CI,OAAK,yCAAEV,6CAAO;KAAE,mBAAiB","names":["_createElementBlock","onSubmit","$options","_Fragment","$data","item","index","key","_createElementVNode","type","name","email","onClick"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n\n    <tr v-for=\"(item, index) in formData\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n\t<button @click=\"addItem\">Ajouter une ligne</button>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: [\n        {name: '', email: ''},\n      ],\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\tconsole.log(this.formData);\n\t\t//Data from table + form\n\t\tvar result = this.formData;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-4', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-4');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    addItem() {\n      this.formData.push({ name: \"\", email: \"\"});\n    },\n    removeItem(index) {\n      this.formData.splice(index, 1);\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}