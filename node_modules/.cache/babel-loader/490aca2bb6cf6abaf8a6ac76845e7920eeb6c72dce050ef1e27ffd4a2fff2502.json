{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Envoyer\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", null, [_createTextVNode(\" Nom: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.formData.name = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.formData.name]])]), _createElementVNode(\"label\", null, [_createTextVNode(\" Adresse email: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.formData.email = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.formData.email]])]), _hoisted_1], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";gCAUIA,oBAAsC;EAA9BC,IAAI,EAAC;AAAQ,GAAC,SAAO;;;uBAT/BC,oBAUO;IAVAC,QAAM,wDAAUC,mDAAU;MAC/BJ,oBAGQ,iCAHD,QAEL,uCAAmE;IAA5DC,IAAI,EAAC,MAAM;+DAAUI,cAAQ,CAACC,IAAI;IAAGC,OAAK,yCAAEH,uDAAY;iEAAnCC,cAAQ,CAACC,IAAI,OAE3CN,oBAGQ,iCAHD,kBAEL,uCAAqE;IAA9DC,IAAI,EAAC,OAAO;+DAAUI,cAAQ,CAACG,KAAK;IAAGD,OAAK,yCAAEH,uDAAY;iEAApCC,cAAQ,CAACG,KAAK,OAE7CC,UAAsC","names":["_createElementVNode","type","_createElementBlock","onSubmit","$options","$data","name","onInput","email","_hoisted_1"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n    <label>\n      Nom:\n      <input type=\"text\" v-model=\"formData.name\" @input=\"saveFormData\" />\n    </label>\n    <label>\n      Adresse email:\n      <input type=\"email\" v-model=\"formData.email\" @input=\"saveFormData\" />\n    </label>\n    <button type=\"submit\">Envoyer</button>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n      },\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\tconsole.log(this.formData);\n\t\tawait set('VG-xxx-1', JSON.stringify(this.formData));\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-1');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}