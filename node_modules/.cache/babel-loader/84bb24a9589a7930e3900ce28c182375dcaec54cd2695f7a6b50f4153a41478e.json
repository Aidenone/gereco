{"ast":null,"code":"import { set, get } from 'idb-keyval';\nexport default {\n  name: 'VGInter',\n  data() {\n    return {\n      vg_occ: '',\n      vg_id: '',\n      appartements: [{\n        num: '',\n        bat: '',\n        escalier: '',\n        etage: '',\n        porte: '',\n        suivi: '',\n        inter_ra: [],\n        inter_wc: [],\n        inter_rob: [],\n        verif_ra: 0,\n        verif_rob: 0,\n        verif_wc: 0\n      }]\n    };\n  },\n  mounted() {\n    let uri = window.location.href.split('?');\n    let vars = uri[1].split('&');\n    let getVars = {};\n    let tmp = '';\n    vars.forEach(function (v) {\n      tmp = v.split('=');\n      if (tmp.length == 2) getVars[tmp[0]] = tmp[1];\n    });\n    let item_id = getVars.vgocc;\n    this.vg_occ = item_id;\n    this.vg_id = this.$route.params.id;\n    this.getFormData();\n    // window.addEventListener('beforeunload', this.saveFormData);\n  },\n\n  // beforeUnmount() {\n  //   window.removeEventListener('beforeunload', this.saveFormData);\n  // },\n  methods: {\n    async saveFormData() {\n      //Data from table + form\n      var result = this.$data;\n      //To avoid cloning error\n      result = JSON.stringify(result);\n      var test = JSON.parse(result);\n      await set('VG-xxx-' + this.vg_occ, test.appartements);\n    },\n    async getFormData() {\n      let savedData = await get('VG-xxx-' + this.vg_occ);\n      this.appartements = savedData;\n    },\n    addItem() {\n      //mettre type en arg\n      // this['inter_'+type].push({ name: \"\", email: \"\"});\n      let nbr_line = document.querySelectorAll('.vg-line').length + 1;\n      set('VG-xxx-' + nbr_line, {\n        num: '',\n        bat: '',\n        etage: '',\n        porte: '',\n        suivi: ''\n      });\n      this.saveFormData();\n    },\n    removeItem(index, type) {\n      this['inter_' + type].splice(index, 1);\n      this.saveFormData();\n    },\n    submitForm() {\n      this.getFormData();\n    }\n  }\n};","map":{"version":3,"mappings":"AAsCA,SAASA,GAAG,EAAEC,GAAE,QAAS,YAAY;AAErC,eAAe;EACdC,IAAI,EAAE,SAAS;EACfC,IAAI,GAAG;IACN,OAAO;MACNC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,CACb;QAACC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,QAAQ,EAAE,CAAC;QAAEC,SAAS,EAAE,CAAC;QAACC,QAAQ,EAAE;MAAE;IAErJ,CAAC;EACF,CAAC;EACDC,OAAO,GAAG;IACT,IAAIC,GAAE,GAAIC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;IACzC,IAAIC,IAAG,GAAIL,GAAG,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAC5B,IAAIE,OAAM,GAAI,CAAC,CAAC;IAChB,IAAIC,GAAE,GAAI,EAAE;IACZF,IAAI,CAACG,OAAO,CAAC,UAASC,CAAC,EAAE;MACzBF,GAAE,GAAIE,CAAC,CAACL,KAAK,CAAC,GAAG,CAAC;MAClB,IAAGG,GAAG,CAACG,MAAK,IAAK,CAAC,EACjBJ,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;IACF,IAAII,OAAM,GAAIL,OAAO,CAACM,KAAK;IAC3B,IAAI,CAAC5B,MAAK,GAAI2B,OAAO;IACrB,IAAI,CAAC1B,KAAI,GAAI,IAAI,CAAC4B,MAAM,CAACC,MAAM,CAACC,EAAE;IAElC,IAAI,CAACC,WAAW,EAAE;IAClB;EACD,CAAC;;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP,MAAMC,YAAY,GAAG;MACvB;MACA,IAAIC,MAAK,GAAI,IAAI,CAACC,KAAK;MACvB;MACAD,MAAK,GAAIE,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;MAC/B,IAAII,IAAG,GAAIF,IAAI,CAACG,KAAK,CAACL,MAAM,CAAC;MAC7B,MAAMvC,GAAG,CAAC,SAAS,GAAC,IAAI,CAACI,MAAM,EAAEuC,IAAI,CAACrC,YAAY,CAAC;IACjD,CAAC;IACD,MAAM8B,WAAW,GAAG;MACtB,IAAIS,SAAQ,GAAI,MAAM5C,GAAG,CAAC,SAAS,GAAC,IAAI,CAACG,MAAM,CAAC;MAChD,IAAI,CAACE,YAAW,GAAIuC,SAAS;IAC3B,CAAC;IACDC,OAAO,GAAG;MACZ;MACA;MACA,IAAIC,QAAO,GAAIC,QAAQ,CAACC,gBAAgB,CAAC,UAAU,CAAC,CAACnB,MAAK,GAAI,CAAC;MAC/D9B,GAAG,CAAC,SAAS,GAAC+C,QAAQ,EAAE;QAACxC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEE,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAE,CAAC,CAAC;MAC5E,IAAI,CAAC0B,YAAY,EAAE;IACjB,CAAC;IACDY,UAAU,CAACC,KAAK,EAAEC,IAAI,EAAE;MAC1B,IAAI,CAAC,QAAQ,GAACA,IAAI,CAAC,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACpC,IAAI,CAACb,YAAY,EAAE;IACjB,CAAC;IACDgB,UAAU,GAAG;MACX,IAAI,CAAClB,WAAW,EAAE;IACpB;EACF;AACF,CAAC","names":["set","get","name","data","vg_occ","vg_id","appartements","num","bat","escalier","etage","porte","suivi","inter_ra","inter_wc","inter_rob","verif_ra","verif_rob","verif_wc","mounted","uri","window","location","href","split","vars","getVars","tmp","forEach","v","length","item_id","vgocc","$route","params","id","getFormData","methods","saveFormData","result","$data","JSON","stringify","test","parse","savedData","addItem","nbr_line","document","querySelectorAll","removeItem","index","type","splice","submitForm"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/VGInter.vue"],"sourcesContent":["<template>\n\t<form @submit.prevent=\"submitForm\">\n\t\tFICHE N°{{this.vg_occ}} <br>\n\n\t\t<table>\n\t\t<tr>\n\t\t\t<th>N°</th>\n\t\t\t<th>Bât.</th>\n\t\t\t<th>Esc.</th>\n\t\t\t<th>Et.</th>\n\t\t\t<th>Porte</th>\n\t\t\t<th>Suivi</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>{{this.appartements.num}}</td>\n\t\t\t<td>{{this.appartements.bat}}</td>\n\t\t\t<td>{{this.appartements.escalier}}</td>\n\t\t\t<td>{{this.appartements.etage}}</td>\n\t\t\t<td>{{this.appartements.porte}}</td>\n\t\t\t<td>{{this.appartements.suivi}}</td>\n\t\t</tr>\n      </table>\n\n\t<div class=\"checkbox_list\">\n\t\t<div>Vérification</div>\n\t\t<input type=\"checkbox\" name=\"checkbox_cloture\" v-model=\"this.appartements.verif_ra\">\n\t\t<label for=\"checkbox_cloture\">Vérification RA</label>\n\n\t\t<input type=\"checkbox\" name=\"checkbox_suspens\" v-model=\"this.appartements.verif_rob\">\n\t\t<label for=\"checkbox_cloture\">Verification Robinetterie</label>\n\n\t\t<input type=\"checkbox\" name=\"checkbox_devis\" v-model=\"this.appartements.verif_wc\">\n\t\t<label for=\"checkbox_cloture\">Verification WC</label>\n\t</div>\n\t</form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n\tname: 'VGInter',\n\tdata() {\n\t\treturn {\n\t\t\tvg_occ: '',\n\t\t\tvg_id: '',\n\t\t\tappartements: [\n\t\t\t\t{num: '', bat: '', escalier: '', etage: '', porte: '', suivi: '', inter_ra: [], inter_wc: [], inter_rob: [], verif_ra: 0, verif_rob: 0,verif_wc: 0,}\n\t\t\t],\n\t\t};\n\t},\n\tmounted() {\n\t\tlet uri = window.location.href.split('?');\n\t\tlet vars = uri[1].split('&');\n\t\tlet getVars = {};\n\t\tlet tmp = '';\n\t\tvars.forEach(function(v) {\n\t\ttmp = v.split('=');\n\t\tif(tmp.length == 2)\n\t\t\tgetVars[tmp[0]] = tmp[1];\n\t\t});\n\t\tlet item_id = getVars.vgocc;\n\t\tthis.vg_occ = item_id;\n\t\tthis.vg_id = this.$route.params.id;\n\t\t\n\t\tthis.getFormData();\n\t\t// window.addEventListener('beforeunload', this.saveFormData);\n\t},\n  // beforeUnmount() {\n  //   window.removeEventListener('beforeunload', this.saveFormData);\n  // },\n  methods: {\n    async saveFormData() {\n\t\t//Data from table + form\n\t\tvar result = this.$data;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\t\tawait set('VG-xxx-'+this.vg_occ, test.appartements);\n    },\n    async getFormData() {\n\t\tlet savedData = await get('VG-xxx-'+this.vg_occ);\n\t\tthis.appartements = savedData;\n    },\n    addItem() {\n\t\t//mettre type en arg\n\t\t// this['inter_'+type].push({ name: \"\", email: \"\"});\n\t\tlet nbr_line = document.querySelectorAll('.vg-line').length + 1;\n\t\tset('VG-xxx-'+nbr_line, {num: '', bat: '', etage: '', porte: '', suivi: ''});\n\t\tthis.saveFormData();\n    },\n    removeItem(index, type) {\n\t\tthis['inter_'+type].splice(index, 1);\n\t\tthis.saveFormData();\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}