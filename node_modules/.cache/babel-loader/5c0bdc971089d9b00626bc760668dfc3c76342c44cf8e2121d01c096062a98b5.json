{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport './registerServiceWorker';\nimport router from './router';\nimport { VueSignaturePad } from 'vue-signature-pad';\nimport axios from \"axios\";\nimport { get, keys } from 'idb-keyval';\nlet app = createApp(App);\napp.config.globalProperties.currIp = 'https://ns3359877.ip-37-187-97.eu';\napp.component(\"VueSignaturePad\", VueSignaturePad);\napp.use(router).mount('#app');\nasync function checkDP() {\n  let current_tech = await get('current_tech');\n  if (typeof current_tech == 'undefined') {\n    console.log('No tech ID. Please Log in.');\n  } else {\n    const sendGetRequest = async () => {\n      try {\n        const response = await axios.get('https://ns3359877.ip-37-187-97.eu/my_missions?tech_id=' + current_tech);\n        this.resp = response.data;\n\n        //del old tasks\n\n        const ks = await keys();\n        var task_tab = [];\n        for (const k of ks) {\n          if (k.includes(\"-task\")) {\n            task_tab.push(k);\n            // del(k);\n          }\n        }\n\n        console.log(task_tab);\n        this.resp.forEach(async function (element) {\n          var id = element.Item_id;\n          var type = element.Item_type;\n          element = JSON.stringify(element);\n          var data = JSON.parse(element);\n          var name = type + '-' + id + '-task';\n          if (task_tab.includes(name) && type == \"VH\") {\n            console.log(name + \" is in task_tab\");\n          }\n\n          //set new tasks\n          // await set(name, data);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    await sendGetRequest();\n\n    //get tasks from cache\n    // var data_tasks = [];\n    // var cache_entries = await entries();\n    // for (var i = 0; i <= cache_entries.length - 1; i++) {\n    //     if (cache_entries[i][0].toString().includes(\"-task\")) {\n\n    //         //add formated_date\n    //         var dateParts = cache_entries[i][1][\"Evt_dtDebut\"].split(\" \");\n    //         dateParts = dateParts[1].split(\"/\");\n    //         var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    //         cache_entries[i][1][\"unix_date\"] = Date.parse(dateObject);\n    //         data_tasks.push(cache_entries[i][1]);\n    //     }\n    // }\n\n    // console.log(data_tasks);\n    // data_tasks.sort(function(a,b){return a[\"unix_date\"] - b[\"unix_date\"]});\n    // this.data_tasks = data_tasks;\n  }\n\n  //    navigator.serviceWorker.register('service-worker.js');\n  // if (Notification.permission === \"granted\") {\n  // \tnavigator.serviceWorker.ready.then(function(registration) {\n  // \t\tregistration.showNotification('Notification with ServiceWorker');\n  // \t});\n  // } else {\n  // \t// We need to ask the user for permission\n  // \tNotification.requestPermission().then((permission) => {\n  // \t\tconsole.log(permission);\n  // \t\tif (permission === \"granted\") {\n  // \t\t\tnavigator.serviceWorker.ready.then(function(registration) {\n  // \t\t\t\tregistration.showNotification('Notification with ServiceWorker');\n  // \t\t\t});\n  // \t\t}\n  // \t});\n  // }\n}\n\nsetInterval(checkDP, 4000);\n\n// async function test() {\n// \tconst registration = await navigator.serviceWorker.ready;\n\n// \tif(\"periodicSync\" in registration) {\n// \t\t// Background Periodic Sync functionality\n// \t\tconst periodicSync = registration.periodicSync;\n// \t\tconsole.log(registration);\n// \t}\n// }\n// test();","map":{"version":3,"names":["createApp","App","router","VueSignaturePad","axios","get","keys","app","config","globalProperties","currIp","component","use","mount","checkDP","current_tech","console","log","sendGetRequest","response","resp","data","ks","task_tab","k","includes","push","forEach","element","id","Item_id","type","Item_type","JSON","stringify","parse","name","err","error","setInterval"],"sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\nimport './registerServiceWorker'\nimport router from './router'\nimport { VueSignaturePad } from 'vue-signature-pad';\nimport axios from \"axios\"\nimport { get, keys } from 'idb-keyval';\n\n\nlet app = createApp(App)\napp.config.globalProperties.currIp = 'https://ns3359877.ip-37-187-97.eu'\napp.component(\"VueSignaturePad\", VueSignaturePad);\napp.use(router).mount('#app')\n\nasync function checkDP() {\n\n\tlet current_tech = await get('current_tech');\n    if (typeof current_tech == 'undefined') {\n        console.log('No tech ID. Please Log in.');\n    } else {\n        const sendGetRequest = async () => {\n            try {\n                const response = await axios.get('https://ns3359877.ip-37-187-97.eu/my_missions?tech_id='+current_tech);\n                this.resp = response.data;\n\n                //del old tasks\n\n                const ks = await keys();\n                var task_tab = [];\n                for (const k of ks) {\n                    if (k.includes(\"-task\")) {\n                        task_tab.push(k);\n                        // del(k);\n                    }\n                }\n                console.log(task_tab);\n\n                this.resp.forEach(async function(element) {\n                    var id = element.Item_id;\n                    var type = element.Item_type;\n                    element = JSON.stringify(element);\n                    var data = JSON.parse(element);\n                    var name = type+'-'+id+'-task';\n                    if(task_tab.includes(name) && type == \"VH\") {\n\t\t\t\t\t\tconsole.log(name+\" is in task_tab\");\n                    }\n\n                    //set new tasks\n                    // await set(name, data);\n                });\n            } catch (err) {\n                console.error(err);\n            }\n        };\n        await sendGetRequest();\n\n        //get tasks from cache\n        // var data_tasks = [];\n        // var cache_entries = await entries();\n        // for (var i = 0; i <= cache_entries.length - 1; i++) {\n        //     if (cache_entries[i][0].toString().includes(\"-task\")) {\n\n        //         //add formated_date\n        //         var dateParts = cache_entries[i][1][\"Evt_dtDebut\"].split(\" \");\n        //         dateParts = dateParts[1].split(\"/\");\n        //         var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        //         cache_entries[i][1][\"unix_date\"] = Date.parse(dateObject);\n        //         data_tasks.push(cache_entries[i][1]);\n        //     }\n        // }\n        \n        // console.log(data_tasks);\n        // data_tasks.sort(function(a,b){return a[\"unix_date\"] - b[\"unix_date\"]});\n        // this.data_tasks = data_tasks;\n    }\n\n\n //    navigator.serviceWorker.register('service-worker.js');\n\t// if (Notification.permission === \"granted\") {\n\t// \tnavigator.serviceWorker.ready.then(function(registration) {\n\t// \t\tregistration.showNotification('Notification with ServiceWorker');\n\t// \t});\n\t// } else {\n\t// \t// We need to ask the user for permission\n\t// \tNotification.requestPermission().then((permission) => {\n\t// \t\tconsole.log(permission);\n\t// \t\tif (permission === \"granted\") {\n\t// \t\t\tnavigator.serviceWorker.ready.then(function(registration) {\n\t// \t\t\t\tregistration.showNotification('Notification with ServiceWorker');\n\t// \t\t\t});\n\t// \t\t}\n\t// \t});\n\t// }\n}\nsetInterval(checkDP, 4000);\n\n\n// async function test() {\n// \tconst registration = await navigator.serviceWorker.ready;\n\n// \tif(\"periodicSync\" in registration) {\n// \t\t// Background Periodic Sync functionality\n// \t\tconst periodicSync = registration.periodicSync;\n// \t\tconsole.log(registration);\n// \t}\n// }\n// test();\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAO,yBAAyB;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,QAAQ,YAAY;AAGtC,IAAIC,GAAG,GAAGP,SAAS,CAACC,GAAG,CAAC;AACxBM,GAAG,CAACC,MAAM,CAACC,gBAAgB,CAACC,MAAM,GAAG,mCAAmC;AACxEH,GAAG,CAACI,SAAS,CAAC,iBAAiB,EAAER,eAAe,CAAC;AACjDI,GAAG,CAACK,GAAG,CAACV,MAAM,CAAC,CAACW,KAAK,CAAC,MAAM,CAAC;AAE7B,eAAeC,OAAOA,CAAA,EAAG;EAExB,IAAIC,YAAY,GAAG,MAAMV,GAAG,CAAC,cAAc,CAAC;EACzC,IAAI,OAAOU,YAAY,IAAI,WAAW,EAAE;IACpCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC7C,CAAC,MAAM;IACH,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACC,GAAG,CAAC,wDAAwD,GAACU,YAAY,CAAC;QACvG,IAAI,CAACK,IAAI,GAAGD,QAAQ,CAACE,IAAI;;QAEzB;;QAEA,MAAMC,EAAE,GAAG,MAAMhB,IAAI,CAAC,CAAC;QACvB,IAAIiB,QAAQ,GAAG,EAAE;QACjB,KAAK,MAAMC,CAAC,IAAIF,EAAE,EAAE;UAChB,IAAIE,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACrBF,QAAQ,CAACG,IAAI,CAACF,CAAC,CAAC;YAChB;UACJ;QACJ;;QACAR,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;QAErB,IAAI,CAACH,IAAI,CAACO,OAAO,CAAC,gBAAeC,OAAO,EAAE;UACtC,IAAIC,EAAE,GAAGD,OAAO,CAACE,OAAO;UACxB,IAAIC,IAAI,GAAGH,OAAO,CAACI,SAAS;UAC5BJ,OAAO,GAAGK,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;UACjC,IAAIP,IAAI,GAAGY,IAAI,CAACE,KAAK,CAACP,OAAO,CAAC;UAC9B,IAAIQ,IAAI,GAAGL,IAAI,GAAC,GAAG,GAACF,EAAE,GAAC,OAAO;UAC9B,IAAGN,QAAQ,CAACE,QAAQ,CAACW,IAAI,CAAC,IAAIL,IAAI,IAAI,IAAI,EAAE;YAC1Df,OAAO,CAACC,GAAG,CAACmB,IAAI,GAAC,iBAAiB,CAAC;UACrB;;UAEA;UACA;QACJ,CAAC,CAAC;MACN,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVrB,OAAO,CAACsB,KAAK,CAACD,GAAG,CAAC;MACtB;IACJ,CAAC;IACD,MAAMnB,cAAc,CAAC,CAAC;;IAEtB;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ;;EAGH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD;;AACAqB,WAAW,CAACzB,OAAO,EAAE,IAAI,CAAC;;AAG1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}