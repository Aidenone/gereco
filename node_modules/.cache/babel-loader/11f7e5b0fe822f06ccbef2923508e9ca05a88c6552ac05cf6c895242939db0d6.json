{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = [\"onUpdate:modelValue\"];\nconst _hoisted_2 = [\"onUpdate:modelValue\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onUpdate:modelValue\"];\nconst _hoisted_5 = [\"onUpdate:modelValue\"];\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[9] || (_cache[9] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createTextVNode(\" Ville: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => this.ville = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, this.ville]]), _createTextVNode(\" Verification RA: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => this.verif_ra = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelCheckbox, this.verif_ra]]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.inter_ra, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.name = $event,\n      onInput: _cache[4] || (_cache[4] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1), [[_vModelText, item.name]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.email = $event,\n      onInput: _cache[5] || (_cache[5] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), [[_vModelText, item.email]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.removeItem(index)\n    }, \"Supprimer\", 8 /* PROPS */, _hoisted_3)])]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.inter_wc, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.name = $event,\n      onInput: _cache[6] || (_cache[6] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4), [[_vModelText, item.name]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.email = $event,\n      onInput: _cache[7] || (_cache[7] = (...args) => $options.saveFormData && $options.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5), [[_vModelText, item.email]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.removeItem(index)\n    }, \"Supprimer\", 8 /* PROPS */, _hoisted_6)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.addItem && $options.addItem(...args))\n  }, \"Ajouter une ligne\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;;;;uBACEA,oBAsBO;IAtBAC,QAAM,wDAAUC,mDAAU;uBAAE,UAE/B,uCAAgE;IAAzDC,IAAI,EAAC,MAAM;oEAAeC,KAAK;IAAGC,OAAK,yCAAEH,uDAAY;sEAA3BE,KAAK,sBAA0B,oBAGhE,uCAAqE;IAA9DD,IAAI,EAAC,UAAU;oEAAeG,QAAQ;IAAGD,OAAK,yCAAEH,uDAAY;0EAA9BI,QAAQ,wBAE/CN,oBAMEO,6BAN0BC,cAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBAAvBV,oBAME;MANqCW,GAAG,EAAED;IAAK,IACnDE,oBAAwE,6BAApEA,oBAA+D;MAAxDT,IAAI,EAAC,MAAM;uCAAUM,IAAI,CAACI,IAAI;MAAGR,OAAK,yCAAEH,uDAAY;yEAA/BO,IAAI,CAACI,IAAI,OACzCD,oBAAyE,6BAArEA,oBAAgE;MAAzDT,IAAI,EAAC,MAAM;uCAAUM,IAAI,CAACK,KAAK;MAAGT,OAAK,yCAAEH,uDAAY;yEAAhCO,IAAI,CAACK,KAAK,OAC1CF,oBAEK,aADLA,oBAAqD;MAA5CG,OAAK,YAAEb,mBAAU,CAACQ,KAAK;OAAG,WAAS;qDAG7CV,oBAMKO,6BANuBC,cAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBAAvBV,oBAMK;MANkCW,GAAG,EAAED;IAAK,IAChDE,oBAAwE,6BAApEA,oBAA+D;MAAxDT,IAAI,EAAC,MAAM;uCAAUM,IAAI,CAACI,IAAI;MAAGR,OAAK,yCAAEH,uDAAY;yEAA/BO,IAAI,CAACI,IAAI,OACzCD,oBAAyE,6BAArEA,oBAAgE;MAAzDT,IAAI,EAAC,MAAM;uCAAUM,IAAI,CAACK,KAAK;MAAGT,OAAK,yCAAEH,uDAAY;yEAAhCO,IAAI,CAACK,KAAK,OAC1CF,oBAEK,aADLA,oBAAqD;MAA5CG,OAAK,YAAEb,mBAAU,CAACQ,KAAK;OAAG,WAAS;kCAG7CE,oBAAmD;IAA1CG,OAAK,yCAAEb,6CAAO;KAAE,mBAAiB","names":["_createElementBlock","onSubmit","$options","type","ville","onInput","verif_ra","_Fragment","$data","item","index","key","_createElementVNode","name","email","onClick"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n      Ville:\n      <input type=\"text\" v-model=\"this.ville\" @input=\"saveFormData\" />\n\n      Verification RA:\n      <input type=\"checkbox\" v-model=\"this.verif_ra\" @input=\"saveFormData\">\n\n    <tr v-for=\"(item, index) in inter_ra\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" @input=\"saveFormData\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" @input=\"saveFormData\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n\t<tr v-for=\"(item, index) in inter_wc\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" @input=\"saveFormData\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" @input=\"saveFormData\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n\t<button @click=\"addItem\">Ajouter une ligne</button>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      verif_ra: false,\n      ville: '',\n      inter_ra: [\n        {name: '', email: ''},\n      ],\n      inter_wc: [\n        {name: '', email: ''},\n      ],\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\t//Data from table + form\n\t\tvar result = this.$data;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-8', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-8');\n      console.log(savedData);\n      if (savedData) {\n        this.ville = savedData.ville;\n        this.inter_ra = savedData.inter_ra;\n        this.inter_wc = savedData.inter_wc;\n        this.verif_ra = savedData.verif_ra;\n      }\n    },\n    addItem() {\n      this.inter_ra.push({ name: \"\", email: \"\"});\n      this.saveFormData();\n    },\n    removeItem(index) {\n      this.inter_ra.splice(index, 1);\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}