{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { set, get } from 'idb-keyval';\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: [{\n        name: '',\n        email: ''\n      }]\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n      console.log(this.formData);\n      //Data from table + form\n      var result = this.formData;\n      //To avoid cloning error\n      result = JSON.stringify(result);\n      var test = JSON.parse(result);\n      await set('VG-xxx-4', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-4');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    addItem() {\n      this.formData.push({\n        name: \"\",\n        email: \"\"\n      });\n    },\n    removeItem(index) {\n      this.formData.splice(index, 1);\n    },\n    submitForm() {\n      this.getFormData();\n    }\n  }\n};","map":{"version":3,"mappings":";AAwBA,SAASA,GAAG,EAAEC,GAAE,QAAS,YAAY;AAErC,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,CACR;QAACF,IAAI,EAAE,EAAE;QAAEG,KAAK,EAAE;MAAE,CAAC;IAEzB,CAAC;EACH,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACC,WAAW,EAAE;IAClBC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACC,YAAY,CAAC;EAC5D,CAAC;EACDC,aAAa,GAAG;IACdH,MAAM,CAACI,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACF,YAAY,CAAC;EAC/D,CAAC;EACDG,OAAO,EAAE;IACP,MAAMH,YAAY,GAAG;MACvBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,QAAQ,CAAC;MAC1B;MACA,IAAIY,MAAK,GAAI,IAAI,CAACZ,QAAQ;MAC1B;MACAY,MAAK,GAAIC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;MAC/B,IAAIG,IAAG,GAAIF,IAAI,CAACG,KAAK,CAACJ,MAAM,CAAC;MAE7B,MAAMhB,GAAG,CAAC,UAAU,EAAEmB,IAAI,CAAC;IACzB,CAAC;IACD,MAAMZ,WAAW,GAAG;MAClB,MAAMc,SAAQ,GAAI,MAAMpB,GAAG,CAAC,UAAU,CAAC;MACvC,IAAIoB,SAAS,EAAE;QACb,IAAI,CAACjB,QAAO,GAAIiB,SAAS;MAC3B;IACF,CAAC;IACDC,OAAO,GAAG;MACR,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAAC;QAAErB,IAAI,EAAE,EAAE;QAAEG,KAAK,EAAE;MAAE,CAAC,CAAC;IAC5C,CAAC;IACDmB,UAAU,CAACC,KAAK,EAAE;MAChB,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAChC,CAAC;IACDE,UAAU,GAAG;MACX,IAAI,CAACpB,WAAW,EAAE;IACpB;EACF;AACF,CAAC","names":["set","get","name","data","formData","email","mounted","getFormData","window","addEventListener","saveFormData","beforeUnmount","removeEventListener","methods","console","log","result","JSON","stringify","test","parse","savedData","addItem","push","removeItem","index","splice","submitForm"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n    <label>\n      Nom:\n      <input type=\"text\" v-model=\"formData.name\" @input=\"saveFormData\" />\n    </label>\n    <label>\n      Adresse email:\n      <input type=\"email\" v-model=\"formData.email\" @input=\"saveFormData\" />\n    </label>\n    <button type=\"submit\">Envoyer</button>\n\n    <tr v-for=\"(item, index) in formData\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n\t<button @click=\"addItem\">Ajouter une ligne</button>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      formData: [\n        {name: '', email: ''},\n      ],\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\tconsole.log(this.formData);\n\t\t//Data from table + form\n\t\tvar result = this.formData;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-4', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-4');\n      if (savedData) {\n        this.formData = savedData;\n      }\n    },\n    addItem() {\n      this.formData.push({ name: \"\", email: \"\"});\n    },\n    removeItem(index) {\n      this.formData.splice(index, 1);\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}