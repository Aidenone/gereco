{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = [\"onUpdate:modelValue\"];\nconst _hoisted_2 = [\"onUpdate:modelValue\"];\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[7] || (_cache[7] = _withModifiers((...args) => _ctx.submitForm && _ctx.submitForm(...args), [\"prevent\"]))\n  }, [_createTextVNode(\" Ville: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => this.ville = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => _ctx.saveFormData && _ctx.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, this.ville]]), _createTextVNode(\" Verification RA: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => this.verif_ra = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => _ctx.saveFormData && _ctx.saveFormData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelCheckbox, this.verif_ra]]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.recurrence, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.name = $event,\n      onInput: _cache[4] || (_cache[4] = (...args) => _ctx.saveFormData && _ctx.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1), [[_vModelText, item.name]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => item.email = $event,\n      onInput: _cache[5] || (_cache[5] = (...args) => _ctx.saveFormData && _ctx.saveFormData(...args))\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2), [[_vModelText, item.email]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => _ctx.removeItem(index)\n    }, \"Supprimer\", 8 /* PROPS */, _hoisted_3)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.addItem && _ctx.addItem(...args))\n  }, \"Ajouter une ligne\")], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;uBACEA,oBAeO;IAfAC,QAAM,wDAAUC,2CAAU;uBAAE,UAE/B,uCAAgE;IAAzDC,IAAI,EAAC,MAAM;oEAAeC,KAAK;IAAGC,OAAK,yCAAEH,+CAAY;sEAA3BE,KAAK,sBAA0B,oBAGhE,uCAAqE;IAA9DD,IAAI,EAAC,UAAU;oEAAeG,QAAQ;IAAGD,OAAK,yCAAEH,+CAAY;0EAA9BI,QAAQ,wBAE/CN,oBAMEO,6BAN0BL,eAAU,GAA1BM,IAAI,EAAEC,KAAK;yBAAvBT,oBAME;MANuCU,GAAG,EAAED;IAAK,IACrDE,oBAAwE,6BAApEA,oBAA+D;MAAxDR,IAAI,EAAC,MAAM;uCAAUK,IAAI,CAACI,IAAI;MAAGP,OAAK,yCAAEH,+CAAY;yEAA/BM,IAAI,CAACI,IAAI,OACzCD,oBAAyE,6BAArEA,oBAAgE;MAAzDR,IAAI,EAAC,MAAM;uCAAUK,IAAI,CAACK,KAAK;MAAGR,OAAK,yCAAEH,+CAAY;yEAAhCM,IAAI,CAACK,KAAK,OAC1CF,oBAEK,aADLA,oBAAqD;MAA5CG,OAAK,YAAEZ,eAAU,CAACO,KAAK;OAAG,WAAS;kCAG7CE,oBAAmD;IAA1CG,OAAK,yCAAEZ,qCAAO;KAAE,mBAAiB","names":["_createElementBlock","onSubmit","_ctx","type","ville","onInput","verif_ra","_Fragment","item","index","key","_createElementVNode","name","email","onClick"],"sourceRoot":"","sources":["/Users/antoinelucas/Sites/1PBrocoli/gereco/wpa-gereco/src/components/IDBTest.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"submitForm\">\n      Ville:\n      <input type=\"text\" v-model=\"this.ville\" @input=\"saveFormData\" />\n\n      Verification RA:\n      <input type=\"checkbox\" v-model=\"this.verif_ra\" @input=\"saveFormData\">\n\n    <tr v-for=\"(item, index) in recurrence\" :key=\"index\">\n\t\t<td><input type=\"text\" v-model=\"item.name\" @input=\"saveFormData\" /></td>\n\t\t<td><input type=\"text\" v-model=\"item.email\" @input=\"saveFormData\" /></td>\n\t\t<td>\n\t\t<button @click=\"removeItem(index)\">Supprimer</button>\n\t\t</td>\n\t</tr>\n\t<button @click=\"addItem\">Ajouter une ligne</button>\n  </form>\n</template>\n\n<script>\nimport { set, get } from 'idb-keyval';\n\nexport default {\n  name: 'IDBTest',\n  data() {\n    return {\n      verif_ra: '';\n      ville: '',\n      recurrence: [\n        {name: '', email: ''},\n      ],\n    };\n  },\n  mounted() {\n    this.getFormData();\n    window.addEventListener('beforeunload', this.saveFormData);\n  },\n  beforeUnmount() {\n    window.removeEventListener('beforeunload', this.saveFormData);\n  },\n  methods: {\n    async saveFormData() {\n\t\t//Data from table + form\n\t\tvar result = this.$data;\n\t\t//To avoid cloning error\n\t\tresult = JSON.stringify(result);\n\t\tvar test = JSON.parse(result);\n\n\t\tawait set('VG-xxx-7', test);\n    },\n    async getFormData() {\n      const savedData = await get('VG-xxx-7');\n      console.log(savedData);\n      if (savedData) {\n        this.ville = savedData.ville;\n        this.recurrence = savedData.recurrence;\n        this.verif_ra = savedData.verif_ra;\n      }\n    },\n    addItem() {\n      this.recurrence.push({ name: \"\", email: \"\"});\n      this.saveFormData();\n    },\n    removeItem(index) {\n      this.recurrence.splice(index, 1);\n    },\n    submitForm() {\n      this.getFormData();\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}